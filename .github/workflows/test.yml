# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Compile and Release

on:
  push:
    tags:
      - "test"

jobs:  
  build:
    name: Compile on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      matrix:
        os: [macos-10.15]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        if: true
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          echo Install Poetry and use it to create the virtual environment
          echo 
          pip3 install poetry
          #poetry env use python
          poetry show --tree
          poetry install
          echo
          echo test
          brew install pyenv
          PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'  --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6' --enable-shared" pyenv install 3.8.5
          poetry use 3.8
          poetry update

      - name: Compile obs_pS on MacOS (poetry)
        #if: contains(matrix.os, macos-latest)
        if: true
        run: |
          echo Compile in poetry venv
          echo add pyinstaller to poetry venv
          #poetry run pip3 install pyinstaller
          poetry add pyinstaller
          echo Run pyinstaller
          #poetry run pyinstaller scripts/obs_pS.py --noconsole --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl'
          poetry run pyinstaller scripts/obs_pS.py --noconsole
          zip -r obs2.zip dist/
      
      - name: Compile obs_pS on MacOS 
        if: false
        run: |
          echo Install/update tk/tcl
          pip3 install tk
          pip3 install tcl
          echo
          echo Install dependencies
          pip3 install astropy
          pip3 install colour
          pip3 install numpy
          pip3 install Pillow
          pip3 install pyregion
          echo
          echo Install pyinstaller
          pip3 install pyinstaller
          echo
          echo Check installed packages
          pip freeze
          echo Compile with pyinstaller
          pyinstaller scripts/obs_pS.py --noconsole --collect-all --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl'
          zip -r obs2.zip dist/
      
      #- name: Zip the dist folder
      #  uses: papeloto/action-zip@v1
      #  with:
      #    files: dist
      #    dest: obs.zip
        
      #- name: Zip the dist folder
      #  uses: thedoctor0/zip-release@master
      #  with:
      #    type: 'zip'
      #    filename: 'obs2.zip'
      #    path: dist
      
      - name: Check directory
        run: |
          echo Directory
          ls
          echo
          echo dist
          ls dist
          echo
          echo Original folder size
          du -sh dist
          echo Zipped size 1
          #du -sh obs.zip
          echo Zipped size 2
          du -sh obs2.zip
          echo Zipped size 3
          #du -sh dist/obs_pS
          file dist/obs_pS
          
      # Release action 1
      - name: Create release and upload assets
        if: false
        uses: ncipollo/release-action@v1
        with:
          artifacts: "obs2.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # Release action 2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./obs2.zip
          asset_name: obs2.zip
          asset_content_type: application/zip
        
    
